<#
    .SYNOPSIS
    A script to remove guest accounts based on an input list of email addresses.
    
    .PARAMETER Path
    Path to the actions log CSV file generated by the script to reverse the previous changes.

    .OUTPUTS
    All results are exported to CSV and log files and written to the current directory.
    .\GuestAccountRemoval-$date.log
    .\GuestAccountRemovalActions-$date.csv

    .EXAMPLE
    Guest users are listed in C:\temp\userlist.txt and removed

    PS> .\RemoveGuests.ps1 -FilePath C:\temp\userlist.txt
#>

## Parameters
param (
    [string]$FilePath
)

$workingDir = $FilePath
$directorySeparator = '\'
$index = $workingDir.LastIndexOf($directorySeparator)
if ($index -eq -1) {
    $directorySeparator = '/'
}

$index = $workingDir.LastIndexOf($directorySeparator)
$workingDir = $workingDir.Substring(0, $index)

$dateTime = get-date -Format dd-MM-yyyy-HHmm
$logPath = "$workingDir$($directorySeparator)GuestAccountRemoval-$dateTime.log"
$actionsLogPath = "$workingDir$($directorySeparator)GuestAccountRemovalActions-$dateTime.csv"

## Functions
function Write-LogFile {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Path,
        [Parameter(Mandatory=$true)]
        [ValidateSet("Information","Warning","Error")]
        [string]$Type,
        [Parameter(Mandatory=$true)]
        [string]$Message
    )

    $dateTime = Get-Date -Format s
    $line = "$dateTime`t$Type`t$UserPrincipalName`t$Message"
    try {
        $line | Out-File $Path -Append -ErrorAction Stop
    } catch {
        Write-Host "$line [$($_.Exception.Message)]"
    }
}

function Write-ActionLog {
    param(
        [Parameter(Mandatory=$true)]
        [ValidateSet("Deleted")]
        [string]$Action,
        [Parameter(Mandatory=$true)]
        [string]$Id,
        [Parameter(Mandatory=$true)]
        [string]$UserPrincipalName
    )

    $entry = New-Object -TypeName PSCustomObject -Property @{
        DateTime = Get-Date -Format s;
        Action = $Action;
        Id = $Id;
        UserPrincipalName = $UserPrincipalName;
    }

    try {
        $entry | Select-Object DateTime,Action,Id,UserPrincipalName | Export-Csv $actionsLogPath -Append -NoTypeInformation -ErrorAction Stop
    } catch {
        Write-LogFile -Path $logPath -Type Warning -Message "Failed to write to actions log '$actionsLogPath' '$($entry.DateTime),$($entry.Action),$($entry.Id),$($entry.UserPrincipalName)'. $($_.Exception.Message)"
    }
}

## Begin script
Connect-MgGraph -Scopes "User.ReadWrite.All"

# Define the list of guest emails
$guestEmails = get-content $FilePath

# Loop through each email and remove the corresponding guest user
foreach ($email in $guestEmails) {
    $guestUser = Get-MgUser -Filter "userType eq 'Guest' and mail eq '$email'"
    if ($guestUser) {
        Write-LogFile -Path $logPath -Type Information -Message "Found guest account $($guestUser.DisplayName), will try to remove"
        try {
            Remove-MgUser -UserId $guestUser.Id
            Write-Host "Removed user: $($guestUser.DisplayName)"
            Write-ActionLog -Action Deleted -Id $user.Id -UserPrincipalName $guestUser.UserPrincipalName
            Write-LogFile -Path $logPath -Type Information -Message "User $($guestUser.UserPrincipalName) has been deleted"
            }
        catch {
            Write-LogFile -Path $logPath -Type Warning -Message "User $($guestUser.UserPrincipalName) has been deleted"
            }
    } else {
        Write-Host "No guest user found with email: $email"
        Write-LogFile -Path $logPath -Type Information -Message "Guest User $($guestUser.UserPrincipalName) was not found"
    }
}
